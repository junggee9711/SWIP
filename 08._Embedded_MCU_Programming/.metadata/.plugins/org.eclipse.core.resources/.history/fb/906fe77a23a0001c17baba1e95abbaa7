/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include "vadc.h"

#include <stdio.h>

/******************************* BLUE LED ***********************************/
// SCU Registers
#define SCU_BASE        (0xF0036000)
#define SCU_WDT_CPU0CON0 (*(volatile unsigned int*)(SCU_BASE + 0x100))

#define LCK             1
#define ENDINIT         0

// GTM Registers
// GTM - CMU
#define GTM_BASE                    (0xF0100000)
#define GTM_CMU_CLK_EN              (*(volatile unsigned int*)(GTM_BASE + 0x00300))
#define GTM_CMU_FXCLK_CTRL          (*(volatile unsigned int*)(GTM_BASE + 0x00344))

#define EN_FXCLK                    22
#define FXCLK_SEL                   0

// GTM - TOM0
#define GTM_TOM0_TGC0_GLB_CTRL      (*(volatile unsigned int*)(GTM_BASE + 0x08030))
#define GTM_TOM0_TGC0_ENDIS_CTRL    (*(volatile unsigned int*)(GTM_BASE + 0x08070))
#define GTM_TOM0_TGC0_OUTEN_CTRL    (*(volatile unsigned int*)(GTM_BASE + 0x08078))
#define GTM_TOM0_TGC0_FUPD_CTRL     (*(volatile unsigned int*)(GTM_BASE + 0x08038))

#define GTM_TOM0_CH1_CTRL           (*(volatile unsigned int*)(GTM_BASE + 0x08040))
#define GTM_TOM0_CH1_SR0            (*(volatile unsigned int*)(GTM_BASE + 0x08044))
#define GTM_TOM0_CH1_SR1            (*(volatile unsigned int*)(GTM_BASE + 0x08048))

#define GTM_TOM0_CH2_CTRL           (*(volatile unsigned int*)(GTM_BASE + 0x08080))
#define GTM_TOM0_CH2_SR0            (*(volatile unsigned int*)(GTM_BASE + 0x08084))
#define GTM_TOM0_CH2_SR1            (*(volatile unsigned int*)(GTM_BASE + 0x08088))


#define HOST_TRIG                   0

#define UPEN_CTRL1                  18
#define UPEN_CTRL2                  20

#define ENDIS_CTRL1                 2
#define ENDIS_CTRL2                 4
#define OUTEN_CTRL1                 2
#define OUTEN_CTRL2                 4
#define RSTCN0_CH1                  18
#define RSTCN0_CH2                  20
#define FUPD_CTRL1                  2
#define FUPD_CTRL2                  4

#define CLK_SRC_SR                  12
#define SL                          11

// GTM
#define GTM_CLC                     (*(volatile unsigned int*)(GTM_BASE + 0x9FD00))
#define GTM_TOUTSEL6                (*(volatile unsigned int*)(GTM_BASE + 0x9FD48))

#define DISS                        1
#define DISR                        0
#define SEL7                        14
#define SEL8                        16

// PORT10 Registers
#define PORT10_BASE     (0xF003B000)
#define PORT10_IOCR0    (*(volatile unsigned int*)(PORT10_BASE + 0x10))

#define PC1             11
#define PC2             19

#define PCL1            17
#define PCL2            18

#define PS1             1
#define PS2             2

#define light_sensor_min 2000
#define light_sensor_max 3600

/* Function Prototype */
void init_LED(void);
void init_GTM_TOM0_PWM(void);

IfxCpu_syncEvent g_cpuSyncEvent = 0;

volatile unsigned int systick;
volatile unsigned int systick_curr;
volatile unsigned int systick_prev;
volatile unsigned int potential_meter;
volatile unsigned int light_sensor;
volatile unsigned int potential_meter_duty;
volatile unsigned int light_sensor_duty;
/********************************************************************************/

/******************************** Ultrasonic ************************************/
/* SCU Registers */
#define SCU_BASE            (0xF0036000)
#define SCU_WDTSCON0        (*(volatile unsigned int*)(SCU_BASE + 0x0F0))
#define SCU_WDT_CPU0CON0    (*(volatile unsigned int*)(SCU_BASE + 0x100))
#define SCU_EICR2           (*(volatile unsigned int*)(SCU_BASE + 0x218))
#define SCU_IGCR0           (*(volatile unsigned int*)(SCU_BASE + 0x22C))

#define LCK                 1
#define ENDINIT             0
#define INP0                12
#define EIEN0               11
#define REN0                9
#define FEN0                8
#define EXIS0               4
#define IGP0                14

/* SRC Registers */
#define SRC_BASE            (0xF0038000)
#define SRC_CCU60_SR0       (*(volatile unsigned int*)(SRC_BASE + 0x420))
#define SRC_SCUERU0         (*(volatile unsigned int*)(SRC_BASE + 0xCD4))

#define TOS                 11
#define SRE                 10
#define SRPN                0

/* CCU60 Registers */
#define CCU60_BASE          (0xF0002A00)
#define CCU60_CLC           (*(volatile unsigned int*)(CCU60_BASE + 0x00))
#define CCU60_T12           (*(volatile unsigned int*)(CCU60_BASE + 0x20))
#define CCU60_T12PR         (*(volatile unsigned int*)(CCU60_BASE + 0x24))
#define CCU60_TCTR0         (*(volatile unsigned int*)(CCU60_BASE + 0x70))
#define CCU60_TCTR4         (*(volatile unsigned int*)(CCU60_BASE + 0x78))
#define CCU60_INP           (*(volatile unsigned int*)(CCU60_BASE + 0xAC))
#define CCU60_IEN           (*(volatile unsigned int*)(CCU60_BASE + 0xB0))

#define DISS                1
#define DISR                0
#define CTM                 7
#define T12PRE              3
#define T12CLK              0
#define T12STR              6
#define T12RS               1
#define INPT12              10
#define ENT12PM             7

/* Define PORT15 Registers for Ultrasonic */
#define PORT15_BASE     (0xF003B500)
#define PORT15_OMR      (*(volatile unsigned int*)(PORT15_BASE + 0x04))
#define PORT15_IOCR4    (*(volatile unsigned int*)(PORT15_BASE + 0x14))
#define PORT15_IN       (*(volatile unsigned int*)(PORT15_BASE + 0x24))

#define PCL4            20
#define PS4             4
#define PC5             11
#define PC4             3
#define P5              5


/* Function Prototype */
void init_ultrasonic(void);
void init_ERU(void);
void init_CCU60(void);


/* Global Variables */

volatile unsigned int timer_cnt;
volatile unsigned int start_time;
volatile unsigned int end_time;
volatile unsigned int interval_time;
volatile unsigned int distance;
volatile unsigned char irq_ultra_sensor;
/**********************************************************************************/
#define SRC_CCU61_SR0        (*(volatile unsigned int*)(SRC_BASE + 0x430))
#define CCU61_BASE          (0xF0002B00)
#define CCU61_CLC           (*(volatile unsigned int*)(CCU61_BASE + 0x00))
#define CCU61_T12           (*(volatile unsigned int*)(CCU61_BASE + 0x20))
#define CCU61_T12PR         (*(volatile unsigned int*)(CCU61_BASE + 0x24))
#define CCU61_TCTR0         (*(volatile unsigned int*)(CCU61_BASE + 0x70))
#define CCU61_TCTR4         (*(volatile unsigned int*)(CCU61_BASE + 0x78))
#define CCU61_INP           (*(volatile unsigned int*)(CCU61_BASE + 0xAC))
#define CCU61_IEN           (*(volatile unsigned int*)(CCU61_BASE + 0xB0))

#define DISS                1
#define DISR                0
#define CTM                 7
#define T12PRE              3
#define T12CLK              0
#define T12STR              6
#define T12RS               1
#define INPT12              10
#define ENT12PM             7

void init_CCU61(int);


int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
    
    init_LED();
    init_GTM_TOM0_PWM();
    init_VADC();
    light_sensor_duty = 0;

    init_ultrasonic();
    init_ERU();
    init_CCU60();
    irq_ultra_sensor = 0;

    distance = 0;

    systick_prev = SYSTEM_TIMER_0_31_0;

    while(1)
    {
        systick_curr = SYSTEM_TIMER_0_31_0;
        systick = systick_curr - systick_prev;

        irq_ultra_sensor = 0;
        while( irq_ultra_sensor == 0 );

        for(int i=0; i<1; i++)
        {
            irq_ultra_sensor = 0;
            while( irq_ultra_sensor == 0 );
        }

        if( systick > SYSTICK_100MHZ/10 )   // 100ms
        {
            systick_prev = systick_curr;

            light_sensor = GetVADC4(6);

            if (light_sensor<3000)
            {
                light_sensor_duty = 12500;
                if (distance > 15)
                    light_sensor_duty = 12500;
                else if (distance > 7 )
                    light_sensor_duty = 6000;
                else
                    light_sensor_duty = 1000;
            }
            else
            {
                light_sensor_duty = 0;
            }

            GTM_TOM0_CH2_SR0 = 12500 - 1;                       // PWM freq. = 6250 kHz / 12500 = 500 Hz

            if( light_sensor_duty == 0 )
                GTM_TOM0_CH2_SR1 = 0;
            else
                GTM_TOM0_CH2_SR1 = light_sensor_duty - 1;

            init_CCU61(distance*10);

        }
    }
    return (1);
}

__interrupt( 0x0A ) __vector_table( 0 )
void CCU60_T12_ISR(void)
{
    timer_cnt++;

    if(timer_cnt == 1)
    {
        /* Set TRIG Pin */
        PORT15_OMR |= (1<<PS4);
    }
    else if(timer_cnt == 2)
    {
        /* Clear TRIG Pin */
        /* Generate 10us Pulse */
        PORT15_OMR |= (1<<PCL4);
    }
    else if(timer_cnt == 10000)
    {
        /* TRIG Period: 100ms */
        timer_cnt = 0;
    }
}

__interrupt( 0x0B ) __vector_table( 0 )
void ERU0_ISR(void)
{
    if((PORT15_IN & (1<<P5)) == 0)              // Falling edge
    {
        /* Get distance */
        end_time = timer_cnt;

        // 10us
        interval_time = end_time - start_time;  // clock per 0.02us

        // 340m/s -> 340_00cm/s -> 340_00
        // 1us    -> 1000000/340_00 = 29
        // ToF(Time of Flight) = distance * 2
        // distance = ToF us / 58 cm
        // distance = ToF 10us / 5.8 cm
        // distance = ToF 10us 17/100 cm

        //distance = ((interval_time/2)*34000)/1000_00;    // cm
        distance = (interval_time*17)/100;      // cm
        irq_ultra_sensor = 1;
    }
    else                                        // Rising edge
    {
        start_time = timer_cnt;
    }
}

__interrupt( 0x0C ) __vector_table( 0 )
void CCU61_T12_ISR(void)
{
    if ( distance > 15 )
    {
//        PORT10_IOCR0 &= ~(1 << PS1);           // PORT10.1 : Alternate output function 1 (push-pull)
//        PORT10_IOCR0 |= (1 << PCL1);

        PORT10_OMR = (1<<PCL1);
    }
    else
    {
        PORT10_OMR |= ((1<<PCL1) | (1<<PS1));
    }

}


