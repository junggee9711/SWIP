/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include <stdio.h>

#include "my_lib.h"

/* Global Variables */
IfxCpu_syncEvent g_cpuSyncEvent = 0;

volatile unsigned int timer_cnt;
volatile unsigned int start_time;
volatile unsigned int end_time;
volatile unsigned int interval_time;
volatile unsigned int distance;
volatile unsigned char irq_ultra_sensor;
volatile unsigned int delay = 0;

volatile unsigned int systick;
volatile unsigned int systick_curr;
volatile unsigned int systick_prev;
volatile unsigned int potential_meter;
volatile unsigned int light_sensor;
volatile unsigned int potential_meter_duty;
volatile unsigned int light_sensor_duty;
//int mode 0 = toggle, mode 1 = ultra_sensor


int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);

    /* Initialization */
    init_ultrasonic();
    init_ERU();
//    init_CCU60();
    init_LED();

    init_GTM_TOM0_PWM();
    init_VADC();
    init_CCU6((myCCU6 *)&CCU60,500,0x0A,1);             // ultra_sensor interrupt

    systick_prev = SYSTEM_TIMER_0_31_0;

    light_sensor_duty = 0;
    irq_ultra_sensor = 0;

    while(1)
    {
        irq_ultra_sensor = 0;
        while( irq_ultra_sensor == 0 );

        delay = distance*10;
        init_CCU6((myCCU6 *)&CCU61,delay,0x0C,0);       // toggle interrupt

        systick_curr = SYSTEM_TIMER_0_31_0;
        systick = systick_curr - systick_prev;

        if( systick > SYSTICK_100MHZ/1000 )   // 100ms
        {
            systick_prev = systick_curr;

            light_sensor = GetVADC4(6);

            if (light_sensor<3000)
            {
                // light sensor scaling
                 if (light_sensor < light_sensor_min)
                     light_sensor = 0;
                 else if (light_sensor > light_sensor_max)
                     light_sensor = 4095;
                 else
                     light_sensor = ((light_sensor-light_sensor_min) * light_sensor_max) / (light_sensor_max - light_sensor_min);
                 light_sensor_duty = (light_sensor* 12500)/4095;
            }
            else
            {
                light_sensor_duty = 0;
            }

            if (light_sensor<3000)
            {
                light_sensor_duty = 12500;
                if (distance > 15)
                    light_sensor_duty = 12500;
                else if (distance > 7 )
                    light_sensor_duty = 6000;
                else
                    light_sensor_duty = 1000;
            }
            else
            {
                light_sensor_duty = 0;
            }

            GTM_TOM0_CH2_SR0 = 12500 - 1;                       // PWM freq. = 6250 kHz / 12500 = 500 Hz

            if( light_sensor_duty == 0 )
                GTM_TOM0_CH2_SR1 = 0;
            else
                GTM_TOM0_CH2_SR1 = light_sensor_duty - 1;
        }
    }
    return (1);
}

__interrupt( 0x0A ) __vector_table( 0 )
void CCU60_T12_ISR(void)
{
    timer_cnt++;

    if(timer_cnt == 1)
    {
        /* Set TRIG Pin */
        PORT15_OMR |= (1<<PS4);
    }
    else if(timer_cnt == 2)
    {
        /* Clear TRIG Pin */
        /* Generate 10us Pulse */
        PORT15_OMR |= (1<<PCL4);
    }
    else if(timer_cnt == 5000)
    {
        /* TRIG Period: 50ms (Distance measurement execute every 50ms */
        timer_cnt = 0;
    }
}

__interrupt( 0x0B ) __vector_table( 0 )
void ERU0_ISR(void)
{
    if((PORT15_IN & (1<<P5)) == 0)              // Falling edge
    {
        /* Get distance */
        end_time = timer_cnt;

        // 10us
        interval_time = end_time - start_time;  // clock per 0.02us

        // 340m/s -> 340_00cm/s -> 340_00
        // 1us    -> 1000000/340_00 = 29
        // ToF(Time of Flight) = distance * 2
        // distance = ToF us / 58 cm
        // distance = ToF 10us / 5.8 cm
        // distance = ToF 10us 17/100 cm

        //distance = ((interval_time/2)*34000)/1000_00;    // cm
        distance = (interval_time*17)/100;      // cm
        irq_ultra_sensor = 1;
    }
    else                                        // Rising edge
    {
        start_time = timer_cnt;
    }
}

__interrupt( 0x0C ) __vector_table( 0 )
void CCU61_T12_ISR(void)
{
    if(distance >= 100)
    {
//        PORT10_OMR &= ~(1<<PS1);
//        PORT10_OMR |= (1<<PCL1);        // LED RED Off
        PORT10_OMR = ((1<<PCL1)
    }
    else
    {
        PORT10_OMR |= ((1<<PCL1) | (1<<PS1));           // Toggle LED RED
    }
}

