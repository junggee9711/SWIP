/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"

#include "Asclin/Asc/IfxAsclin_Asc.h"
#include "Ifx_Shell.h"
#include "Ifx_Console.h"
#include "IfxPort.h"

#include "my_lib.h"

IfxCpu_syncEvent g_cpuSyncEvent = 0;
volatile unsigned int light_sensor;
volatile unsigned int light_sensor_duty;
volatile unsigned int potential_meter;
volatile unsigned int potential_meter_duty;
volatile int mode = 0;
volatile int start_cnt = 0;
volatile int pwm_cnt;
volatile int first_event = 0;
volatile int PARK_led_flag = 0;
volatile int DRIVE_led_flag = 0;
volatile int REVERSE_led_flag = 0;

volatile unsigned int sw1_cnt = 0;
volatile unsigned int systick_prev, systick_prev2, systick_prev3;
volatile unsigned int systick_curr, systick_curr2, systick_curr3;
volatile unsigned int systick, systick2, systick3;

volatile unsigned int timer_cnt;
volatile unsigned int start_time;
volatile unsigned int end_time;
volatile unsigned int interval_time;
volatile unsigned int distance;
volatile unsigned int irq_ultra_sensor;

int read_data;

///////////////////////////////////////////////////////////////////////////////////
#define ISR_PRIORITY_ASCLIN_TX      8                                       /* Priority for interrupt ISR Transmit  */
#define ISR_PRIORITY_ASCLIN_RX      4                                       /* Priority for interrupt ISR Receive   */
#define ISR_PRIORITY_ASCLIN_ER      12                                      /* Priority for interrupt ISR Errors    */
#define ASC_TX_BUFFER_SIZE          256                                     /* Define the TX buffer size in byte    */
#define ASC_RX_BUFFER_SIZE          256                                     /* Define the RX buffer size in byte    */
#define ASC_BAUDRATE                115200                                  /* Define the UART baud rate            */

Ifx_SizeT uart_count = 1;

/* LED */
//#define LED                         &MODULE_P10,2                           /* LED Port Pin                         */

/* Shell commands and help descriptions */
#define COMMAND_INFO                "info"
#define COMMAND_TOGGLE              "toggle"
#define COMMAND_HELP                "help"
#define COMMAND_INFO_HELP_TEXT      "   : Show the example's info"
#define COMMAND_TOGGLE_HELP_TEXT    " : Command to toggle LED" ENDLINE \
                                    "         The correct syntax for this command is" ENDLINE \
                                    "         '" COMMAND_TOGGLE " [1]'"
#define COMMAND_HELP_HELP_TEXT      "   : Show this help list"



IfxStdIf_DPipe  g_ascStandardInterface;                                     /* Standard interface object            */
IfxAsclin_Asc   g_asclin;                                                   /* ASCLIN module object                 */
Ifx_Shell       g_shellInterface;                                           /* Shell interface object               */

/* The transfer buffers allocate memory for the data itself and for FIFO runtime variables.
 * 8 more bytes have to be added to ensure a proper circular buffer handling independent from
 * the address to which the buffers have been located.
 */
uint8 g_uartTxBuffer[ASC_TX_BUFFER_SIZE + sizeof(Ifx_Fifo) + 8];
uint8 g_uartRxBuffer[ASC_RX_BUFFER_SIZE + sizeof(Ifx_Fifo) + 8];
///////////////////////////////////////////////////////////////////////////////////

void start_event(void);
void control_Blue_Red_LED_Timer(void);
void asc0TxISR(void);
void asc0RxISR(void);
void asc0ErrISR(void);
void initSerialInterface(void);


int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
    
    read_data = 0;

    init_LED();
    init_LED_RGB();

    init_ERU();
    init_VADC();
    init_Buzzer();
    init_GTM_TOM0_PWM_RGB();

    initSerialInterface();

    light_sensor_duty = 0;
    irq_ultra_sensor = 0;
    distance = 0;

    GTM_TOM0_CH11_SR0 = PWM_FREQ;
    GTM_TOM0_CH11_SR1 = 0;
    GTM_CMU_CLK_EN |= ((0x2) << EN_FXCLK);      // enable

    while(1)
    {
        read_data = IfxAsclin_Asc_blockingRead(&g_asclin);
        if(mode == IDLE)
        {
            init_CCU61(0);
            potential_meter = GetVADC4(7);                              // get potential meter value
            potential_meter_duty = (potential_meter*500)/4096;          // scaling potential meter value
            pwm_cnt = PWM_FREQ / (50 + potential_meter_duty);           // determine Buzzer frequency
            GTM_CMU_CLK_EN |= ((0x2) << EN_FXCLK);                      // Buzzer enable
            GTM_TOM0_CH11_SR0 = pwm_cnt;                                // Set Buzzer frequency

            /* if slightly starting a car, buzzer on*/
            if (potential_meter > 10)
                GTM_TOM0_CH11_SR1 = pwm_cnt / 1.3;
                //GTM_TOM0_CH11_SR1 = 0;
            else
                GTM_TOM0_CH11_SR1 = 0;

            if (potential_meter > 4000){
                start_cnt++;
                if (start_cnt > 50000){
                    mode = PARK;
                    start_event();
                    init_LED_start();
                    GTM_CMU_CLK_EN &= ~((0x2) << EN_FXCLK);             // pwm disable
                    GTM_TOM0_CH11_SR1 = 0;                              // Buzzer off

                    GTM_TOM0_CH1_SR0 = 12500 - 1;                       // LED RED ON (twinkle according to distance)
                    GTM_TOM0_CH1_SR1 = 0;
                    GTM_TOM0_CH2_SR0 = 12500 - 1;                       // LED BLUE ON (brighten according to distance)
                    GTM_TOM0_CH2_SR1 = 0;

                    PORT02_OMR |= (1<<PS7);                     // Set RGB LED RED

                    init_ultrasonic();
                    init_CCU60();
                    GTM_CMU_CLK_EN |= ((0x2) << EN_FXCLK);      // enable
                }
            }
            else{
                start_cnt = 0;
            }
        }
        else if(mode == PARK)
        {
            init_CCU61(0);
            if (PARK_led_flag == 0){
                PORT02_OMR |= (1<<PS7);                     // Set RGB LED RED
                PORT10_OMR |= (1<<PCL5);                    // Clear LED GREEN    (ch2)
                PORT10_OMR |= (1<<PCL3);                    // Clear LED BLUE      (ch3)
                //GTM_CMU_CLK_EN |= ((0x2) << EN_FXCLK);      // enable
                PARK_led_flag = 1;
            }

        }
        else if(mode == DRIVE)
        {
            if (DRIVE_led_flag == 0){
                PORT10_OMR |= (1<<PS5);                     // Set RGB LED GREEN
                PORT02_OMR |= (1<<PCL7);                    // Clear LED RED
                PORT10_OMR |= (1<<PCL3);                    // Clear LED BLUE
                //GTM_CMU_CLK_EN |= ((0x2) << EN_FXCLK);      // enable
                DRIVE_led_flag = 1;
            }

            ////////////////////////////////////////////////////////////
            /* ultrasonic, light sensor control */
            //control_Blue_Red_LED_Timer();
            systick_curr2 = SYSTEM_TIMER_0_31_0;
            systick2 = systick_curr2 - systick_prev2;

            irq_ultra_sensor = 0;
            while( irq_ultra_sensor == 0 );

            for(int i=0; i<1; i++)
            {
                irq_ultra_sensor = 0;
                while( irq_ultra_sensor == 0 );
            }

            if( systick2 > SYSTICK_100MHZ/10 )   // 100ms
            {
                systick_prev2 = systick_curr2;

                light_sensor = GetVADC4(6);

                if (light_sensor<3000)
                {
                    light_sensor_duty = 12500;
                    if (distance > 15)
                        light_sensor_duty = 12500;
                    else if (distance > 7 )
                        light_sensor_duty = 6000;
                    else
                        light_sensor_duty = 1000;
                }
                else
                {
                    light_sensor_duty = 0;
                }

                GTM_TOM0_CH2_SR0 = 12500 - 1;                       // PWM freq. = 6250 kHz / 12500 = 500 Hz

                if( light_sensor_duty == 0 )
                    GTM_TOM0_CH2_SR1 = 0;
                else
                    GTM_TOM0_CH2_SR1 = light_sensor_duty - 1;

                CCU61_T12PR = ((48828*distance*10)/1000) - 1;       // Red RED toggle
                CCU61_TCTR4 |= (1 << T12STR);
                //init_CCU61(distance*10);
            }
            ////////////////////////////////////////////////////////////

        }
        else if(mode == REVERSE)
        {
            init_CCU61(0);
            if (REVERSE_led_flag == 0){

                PORT10_OMR |= (1<<PS3);                     // Set RGB LED BLUE
                PORT02_OMR |= (1<<PCL7);                    // Clear LED RED       (ch15)
                PORT10_OMR |= (1<<PCL5);                    // Clear LED GREEN    (ch2)
                //GTM_CMU_CLK_EN |= ((0x2) << EN_FXCLK);      // enable
                REVERSE_led_flag = 1;
            }
        }


    }
    return (1);
}

__interrupt( 0x0A ) __vector_table( 0 )
void CCU60_T12_ISR(void)
{
    if (mode == DRIVE)
    {
        timer_cnt++;

        if(timer_cnt == 1)
        {
            /* Set TRIG Pin */
            PORT15_OMR |= (1<<PS4);
        }
        else if(timer_cnt == 2)
        {
            /* Clear TRIG Pin */
            /* Generate 10us Pulse */
            PORT15_OMR |= (1<<PCL4);
        }
        else if(timer_cnt == 10000)
        {
            /* TRIG Period: 100ms */
            timer_cnt = 0;
        }
    }
}

__interrupt( 0x0B ) __vector_table( 0 )
void ERU0_ISR(void)
{
    if (mode == DRIVE)
    {
        if((PORT15_IN & (1<<P5)) == 0)              // Falling edge
        {
            /* Get distance */
            end_time = timer_cnt;

            // 10us
            interval_time = end_time - start_time;  // clock per 0.02us

            // 340m/s -> 340_00cm/s -> 340_00
            // 1us    -> 1000000/340_00 = 29
            // ToF(Time of Flight) = distance * 2
            // distance = ToF us / 58 cm
            // distance = ToF 10us / 5.8 cm
            // distance = ToF 10us 17/100 cm

            //distance = ((interval_time/2)*34000)/1000_00;    // cm
            distance = (interval_time*17)/100;      // cm
            irq_ultra_sensor = 1;
        }
        else                                        // Rising edge
        {
            start_time = timer_cnt;
        }
    }
}

__interrupt( 0x0C ) __vector_table( 0 )
void CCU61_T12_ISR(void)
{
    if (mode == DRIVE)
    {
        if ( distance > 15 )
        {
            PORT10_OMR = (1<<PCL1);
        }
        else
        {
            PORT10_OMR |= ((1<<PCL1) | (1<<PS1));
        }
    }

}

__interrupt(0x0D) __vector_table(0)
void ERU1_ISR(void)
{
    if(mode == PARK)
    {
        mode = DRIVE;
        PARK_led_flag = 0;
        PORT10_OMR |= (1<<PS5);                     // Set RGB LED GREEN
        PORT02_OMR |= (1<<PCL7);                    // Clear LED RED
        PORT10_OMR |= (1<<PCL3);                    // Clear LED BLUE
        //GTM_CMU_CLK_EN &= ~((0x2) << EN_FXCLK);
    }
    else if(mode == DRIVE){
        mode = 3;
        DRIVE_led_flag = 0;
        PORT10_OMR |= (1<<PS3);                     // Set RGB LED BLUE
        PORT02_OMR |= (1<<PCL7);                    // Clear LED RED       (ch15)
        PORT10_OMR |= (1<<PCL5);                    // Clear LED GREEN    (ch2)
        //GTM_CMU_CLK_EN &= ~((0x2) << EN_FXCLK);
    }
    else if(mode == REVERSE){
        mode = PARK;
        REVERSE_led_flag = 0;
        PORT02_OMR |= (1<<PS7);                     // Set RGB LED RED
        PORT10_OMR |= (1<<PCL5);                    // Clear LED GREEN    (ch2)
        PORT10_OMR |= (1<<PCL3);                    // Clear LED BLUE      (ch3)
        //GTM_CMU_CLK_EN &= ~((0x2) << EN_FXCLK);

    }
    sw1_cnt = 100;

    systick_prev = SYSTEM_TIMER_0_31_0;
    while (1)
    {
        systick_curr = SYSTEM_TIMER_0_31_0;
        systick = systick_curr - systick_prev;
        if (systick>1000000)                //  1M/ 100M = 10us
        {
            systick_prev = SYSTEM_TIMER_0_31_0;
            if(sw1_cnt != 0)
                sw1_cnt--;                  //  10us * 100 = 1s
            else
                break;
        }
    }
}

void start_event(void)
{
    for(int i=0;i<12;i++){
        PORT10_OMR |= ((1<<PCL1) | (1<<PS1));
        PORT10_OMR |= ((1<<PCL2) | (1<<PS2));
        if (i%2 == 0)
        {
            GTM_TOM0_CH11_SR0 = pwm_cnt;
            GTM_TOM0_CH11_SR1 = pwm_cnt / 1.3;
            PORT10_OMR |= (1<<PS3);                 // Set RGB LED BLUE
            PORT02_OMR |= (1<<PS7);                 // Set RGB LED RED
            PORT10_OMR |= (1<<PS5);                 // Set RGB LED GREEN
        }
        else
        {
            GTM_TOM0_CH11_SR0 = pwm_cnt;
            GTM_TOM0_CH11_SR1 = 0;
            PORT10_OMR |= (1<<PCL3);                // Clear LED BLUE
            PORT02_OMR |= (1<<PCL7);                // Clear LED RED
            PORT10_OMR |= (1<<PCL5);                // Clear LED GREEN
        }
        for(int j=0;j<DELAY_250MS;j++);
        if (i%2 == 1)
            for(int j=0;j<DELAY_125MS;j++);
    }
}

void control_Blue_Red_LED_Timer(void)
{
    systick_curr2 = SYSTEM_TIMER_0_31_0;
    systick2 = systick_curr2 - systick_prev2;

    irq_ultra_sensor = 0;
    while( irq_ultra_sensor == 0 );

    for(int i=0; i<1; i++)
    {
        irq_ultra_sensor = 0;
        while( irq_ultra_sensor == 0 );
    }

    if( systick2 > SYSTICK_100MHZ/10 )   // 100ms
    {
        systick_prev2 = systick_curr2;

        light_sensor = GetVADC4(6);

        if (light_sensor<3000)
        {
            light_sensor_duty = 12500;
            if (distance > 15)
                light_sensor_duty = 12500;
            else if (distance > 7 )
                light_sensor_duty = 6000;
            else
                light_sensor_duty = 1000;
        }
        else
        {
            light_sensor_duty = 0;
        }

        GTM_TOM0_CH2_SR0 = 12500 - 1;                       // PWM freq. = 6250 kHz / 12500 = 500 Hz

        if( light_sensor_duty == 0 )
            GTM_TOM0_CH2_SR1 = 0;
        else
            GTM_TOM0_CH2_SR1 = light_sensor_duty - 1;

        init_CCU61(distance*10);
    }
}

IFX_INTERRUPT(asc0TxISR, 0, ISR_PRIORITY_ASCLIN_TX);

void asc0TxISR(void)
{
    IfxStdIf_DPipe_onTransmit(&g_ascStandardInterface);
}

IFX_INTERRUPT(asc0RxISR, 0, ISR_PRIORITY_ASCLIN_RX);

void asc0RxISR(void)
{
    IfxStdIf_DPipe_onReceive(&g_ascStandardInterface);
}

IFX_INTERRUPT(asc0ErrISR, 0, ISR_PRIORITY_ASCLIN_ER);

void asc0ErrISR(void)
{
    IfxStdIf_DPipe_onError(&g_ascStandardInterface);
}


/* Function to initialize ASCLIN module */
void initSerialInterface(void)
{
    IfxAsclin_Asc_Config ascConf;

    /* Set default configurations */
    IfxAsclin_Asc_initModuleConfig(&ascConf, &MODULE_ASCLIN3); /* Initialize the structure with default values      */

    /* Set the desired baud rate */
    ascConf.baudrate.baudrate = ASC_BAUDRATE;                                   /* Set the baud rate in bit/s       */
    ascConf.baudrate.oversampling = IfxAsclin_OversamplingFactor_16;            /* Set the oversampling factor      */

    /* Configure the sampling mode */
    ascConf.bitTiming.medianFilter = IfxAsclin_SamplesPerBit_three;             /* Set the number of samples per bit*/
    ascConf.bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_8;    /* Set the first sample position    */

    /* ISR priorities and interrupt target */
    ascConf.interrupt.txPriority = ISR_PRIORITY_ASCLIN_TX;  /* Set the interrupt priority for TX events             */
    ascConf.interrupt.rxPriority = ISR_PRIORITY_ASCLIN_RX;  /* Set the interrupt priority for RX events             */
    ascConf.interrupt.erPriority = ISR_PRIORITY_ASCLIN_ER;  /* Set the interrupt priority for Error events          */
    ascConf.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    /* Pin configuration */
    const IfxAsclin_Asc_Pins pins = {
            .cts        = NULL_PTR,                         /* CTS pin not used                                     */
            .ctsMode    = IfxPort_InputMode_pullUp,
            .rx         = &IfxAsclin3_RXD_P32_2_IN ,        /* Select the pin for RX connected to the USB port      */
            .rxMode     = IfxPort_InputMode_pullUp,         /* RX pin                                               */
            .rts        = NULL_PTR,                         /* RTS pin not used                                     */
            .rtsMode    = IfxPort_OutputMode_pushPull,
            .tx         = &IfxAsclin3_TX_P15_7_OUT,         /* Select the pin for TX connected to the USB port      */
            .txMode     = IfxPort_OutputMode_pushPull,      /* TX pin                                               */
            .pinDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConf.pins = &pins;

    /* FIFO buffers configuration */
    ascConf.txBuffer = g_uartTxBuffer;                      /* Set the transmission buffer                          */
    ascConf.txBufferSize = ASC_TX_BUFFER_SIZE;              /* Set the transmission buffer size                     */
    ascConf.rxBuffer = g_uartRxBuffer;                      /* Set the receiving buffer                             */
    ascConf.rxBufferSize = ASC_RX_BUFFER_SIZE;              /* Set the receiving buffer size                        */

    /* Init ASCLIN module */
    IfxAsclin_Asc_initModule(&g_asclin, &ascConf);          /* Initialize the module with the given configuration   */

}

//uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)

//boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)


